name: Quality on changed files

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  quality-changed:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on

    steps:
      - name: Checkout (full history required for git diff)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24

      - name: Determine changed .go files
        id: changed-files
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.ref }}"
          else
            BASE_REF="main"
          fi

          git fetch origin "$BASE_REF" --depth=1 || true

          CHANGED=$(git diff --name-only "origin/$BASE_REF"...HEAD || git diff --name-only "$BASE_REF"...HEAD || true)
          CHANGED_GO=$(echo "$CHANGED" | grep '\.go$' || true)

          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_GO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ -n "$CHANGED_GO" ]; then
            echo "has_go_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_go_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Build package list from changed files
        id: packages
        shell: bash
        run: |
          if [ "${{ steps.changed-files.outputs.has_go_files }}" != "true" ]; then
            echo "packages<<EOF" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 0
          fi

          files="${{ steps.changed-files.outputs.changed_files }}"
          # get unique dirs containing changed go files
          dirs=$(echo "$files" | xargs -n1 dirname | sort -u)

          pkgs=""
          for d in $dirs; do
            if [ "$d" = "." ]; then
              pkgs="$pkgs ./"
            else
              pkgs="$pkgs ./$d"
            fi
          done

          pkgs=$(echo "$pkgs" | xargs)

          echo "packages<<EOF" >> $GITHUB_OUTPUT
          echo "$pkgs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Show changed .go files (debug)
        if: steps.changed-files.outputs.has_go_files == 'true'
        run: |
          echo "Changed Go files:"
          echo "${{ steps.changed-files.outputs.changed_files }}"
          echo "Packages to check:"
          echo "${{ steps.packages.outputs.packages }}"

      - name: Check gofmt (only changed files)
        if: steps.changed-files.outputs.has_go_files == 'true'
        run: |
          files="${{ steps.changed-files.outputs.changed_files }}"
          unformatted=$(gofmt -l $files || true)
          if [ -n "$unformatted" ]; then
            echo "Found unformatted files:"
            echo "$unformatted"
            exit 1
          fi

      - name: Run go vet on changed packages
        if: steps.changed-files.outputs.has_go_files == 'true'
        run: |
          pkgs="${{ steps.packages.outputs.packages }}"
          if [ -z "$pkgs" ]; then
            echo "No packages to vet."
            exit 0
          fi
          go vet $pkgs

      - name: Run golangci-lint on changed packages
        if: steps.changed-files.outputs.has_go_files == 'true'
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.59.0
          args: run ${{ steps.packages.outputs.packages }}

      - name: Run tests for changed packages
        if: steps.changed-files.outputs.has_go_files == 'true'
        run: |
          pkgs="${{ steps.packages.outputs.packages }}"
          if [ -z "$pkgs" ]; then
            echo "No packages to test."
            exit 0
          fi
          for p in $pkgs; do
            go test "$p" -v -cover
          done
